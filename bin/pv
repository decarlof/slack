import os
import sys
import time
import pathlib
import argparse
import numpy as np

from epics import PV
from datetime import datetime

from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from dotenv import load_dotenv

from pv import pv
from pv import log
from pv import config


def init(args):
    if not os.path.exists(str(args.config)):
        config.write(str(args.config))
    else:
        raise RuntimeError("{0} already exists".format(args.config))

def status(args):
    config.show_config(args)

def set_pv(args):

    for pvname in args.pv_list:
        log.info('Checking\t%s', pvname)
        pv_in = PV(pvname)
        pv_value = pv_in.get()
        connected, message = pv.check_pvs_connected(pv_in)

def run_log(args):
    global_PVs = {}
    log.info('Logging the following PVs:')

    for x in range(len(args.pv_list)):
        global_PVs[x] = PV(args.pv_list[x])
    try:
        while True:
            for x in range(len(args.pv_list)):
                log.info('PV name: %s; value:  %s' % (args.pv_list[x], global_PVs[x].get(as_string=True)))            
            time.sleep(args.pv_log_time)   
    except KeyboardInterrupt:
        log.warning('interrupted!')
        log.warning('Log information saved at: %s', args.lfname)

def run_slack(args):
    global_PVs = {}
    log.info('Publishing on slack the following PVs on-change only:')

    for x in range(len(args.pv_list)):
        global_PVs[x] = PV(args.pv_list[x], form='ctrl')
        global_PVs[x].add_callback(pv.onChanges)
    try:
        while True:
            for x in range(len(args.pv_list)):
                log.info('PV name: %s; value:  %s' % (args.pv_list[x], global_PVs[x].get(as_string=True)))            
            time.sleep(args.pv_log_time)   
    except KeyboardInterrupt:
        log.warning('interrupted!')
        log.warning('Log information saved at: %s', args.lfname)

def run_ramp(args):

    temp_set  = PV(args.ramp_control_pv)
    temp_read = PV(args.ramp_read_pv)

    time_curr = time.time()

    temp = np.arange(args.ramp_start,args.ramp_end,args.ramp_rate/60)

    for t in temp:
        log.info(f'set temp to {t:0.2f} deg {temp_read.get():0.2f}')
        temp_set.put(t,wait=True)
        while (np.abs(temp_read.get()-t)>1):
            log.info(f'wait on {temp_read.get():0.2f} to reach {t:0.2f}')
            time.sleep(1)
        time.sleep(1)

def main():

    # set logs directory
    home = os.path.expanduser("~")
    logs_home = home + '/logs/'
    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)
    # setup logger
    lfname = logs_home + 'slack_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H:%M:%S") + '.log'
    log.setup_custom_logger(lfname)
    log.warning('Logs are saved at: %s' % lfname)

    # Set slack bot tokens as environment values
    env_path = os.path.join(str(pathlib.Path.home()), '.slackenv')
    load_dotenv(dotenv_path=env_path)
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    show_params   = config.PV_PARAMS
    set_params    = config.PV_PARAMS
    slack_params  = config.PV_PARAMS
    log_params    = config.PV_PARAMS
    ramp_params   = config.RAMP_PARAMS

    cmd_parsers = [
        ('init',        init,           (),                             "Create configuration file"),
        ('status',      status,         show_params,                    "Show the pv-cli status"),
        ('set',         set_pv,         set_params,                     "Set PV to monitor as a comma-separated list"),
        ('log',         run_log,        log_params,                     "Send the list of PVs to a logger"),
        ('slack',       run_slack,      slack_params,                   "Send the list of PVs to a logger and to slack"),
        ('ramp',        run_ramp,       ramp_params,                    "Ramp a PV from start to end at a set ramp rate"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)
    args.lfname = lfname
    
    try: 
        # load args from default (config.py) if not changed
        config.log_values(args)
        args._func(args)
        # undate meta5.config file
        sections = config.PV_PARAMS
        config.write(args.config, args=args, sections=sections)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)

if __name__ == "__main__": 
    main()
